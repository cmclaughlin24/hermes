import { ApiProperty } from '@nestjs/swagger';
import { Transform, TransformFnParams, Type } from 'class-transformer';
import {
  IsBase64,
  IsBoolean,
  IsNotEmpty,
  IsNumber,
  IsOptional,
  IsString,
  ValidateNested,
} from 'class-validator';

export class PushSubscriptionOptionsDto {
  @ApiProperty({
    description:
      'Public key the push server will use to send messages to client apps. ' +
      'Part of a signing key pair generated by the application.',
  })
  @IsString()
  @IsBase64()
  applicationServerKey: string;

  @ApiProperty({
    description:
      'Indicates if the push subscription will only be used for message whose effect ' +
      'is made visible to the user',
  })
  @IsBoolean()
  userVisibleOnly: boolean;
}

export class PushSubscriptionDto {
  @ApiProperty({
    description: 'Endpoint associated with the push subscription',
  })
  @IsString()
  @IsNotEmpty()
  @Transform(({ value }: TransformFnParams) => value?.trim())
  endpoint: string;

  @ApiProperty({
    description: 'Expiration time associated with the push subscription',
    required: false,
  })
  @IsNumber()
  @IsOptional()
  expirationTime?: EpochTimeStamp;

  @ApiProperty({
    description:
      'Object containing the options used to create the subscription',
  })
  @ValidateNested()
  @Type(() => PushSubscriptionOptionsDto)
  options: PushSubscriptionOptionsDto;
}
